
// Copyright (C) metalgeni
//***************************************************************************
// System Name : SPNetworkManager
// Comment     : 
// Creation    : metalgeni 2004-08-23 오후 2:56:36
//***************************************************************************


#pragma once 

using namespace std;

class CPacket;
class CSockWnd;
class CPacketHandler;

#define SENDPACKET(X)	(((SPNetworkManager*)g_pNetworkManager)->GetPacketHandler())->PostMsg(&X)

#define DECLARE_SC_PACKET_PROC(X)	void OnSC_##X(CPacket* packet)
#define CASE_SC_PACKET_PROC(X)		case X:{OnSC_##X(packet);}break
#define DEFINE_SC_PACKET_PROC(X)	void OnSC_##X(CPacket* packet)

#define DECLARE_CS_PACKET_PROC(X)	int OnCS_##X(WPARAM wParam,LPARAM lParam)
#define DEFINE_CS_PACKET_PROC(X)	int SPNetworkManager::OnCS_##X(WPARAM wParam,LPARAM lParam)

#define SPNMESSAGE_COMMAND_EX(X)				SPNMESSAGE_COMMAND(##X,OnCS_##X)		
#define SPNMESSAGE_COMMAND_RANGE_EX(X,ID1,ID2)	SPNMESSAGE_COMMAND_RANGE(##X,ID1,ID2,OnCS_##X)	

#include <string>
#include <vector>
#include <queue>

using namespace std;

class CServerInfo
{
public:
	string	sIP;
	int		iPort;

	CServerInfo() : iPort(0),sIP("")
	{
	}
	CServerInfo(char* ip,int port) : iPort(port),sIP(ip)
	{
	}
	~CServerInfo()
	{
	}

};

class SPNetworkManager : public SPManager 
{
public:
	enum PROCESS_STEP{STEP_NONE,STEP_INIT,STEP_CONNECT,STEP_AUTH_EX,STEP_AUTH_KEYLOGIN,STEP_LOGIN,STEP_LOBBY,STEP_PLAYING,STEP_DISCONNECT,STEP_EXIT,MAX_PROCESS_STEP};

	SPNetworkManager();
	virtual ~SPNetworkManager();
	virtual void	Process(float fTime);
	virtual bool	Init();

	int				SubLogic_Loop(float fTime);
	int				SubLogic_Init();
	void			SubLogic_Exit();

	int				WndProc(UINT message, WPARAM wParam, LPARAM lParam);
	virtual int		SPPerformMessage	(UINT msg, WPARAM wparam = 0, LPARAM lParam = 0);
	CPacketHandler* GetPacketHandler() {return m_pPacketHandler;};
	void			SendProcess(float fTime);
	void			KeepAliveCheck(float fTime);

	bool			CreateHandler();
	
	bool			IsConnected();

	bool			IsVersionCheckPassed(){return m_bVersionCheckPassed;}
	void			SetVersionCheckPassed(bool bValue){m_bVersionCheckPassed = bValue;}

	bool			ConnectToLoginServer();
	bool			ConnectToServer(const char* pszServerID,const int iServerPort);

	bool			CheckVersion(UINT16 uiVersionMajor,UINT16 uiVersionMinor);				// 버전 확인

	bool			AuthUser_KeyLogin(const char* pszKeyID, const char* pszStartTime);		// ConnectToLS()
	// param1(ID), param2(PW or AuthCode)
	bool			AuthUserEx(const char* pszParam1,const char* pszParam2);				// ConnectToLS()

	bool			AuthUser_KeyLogin_Real(const char* pszKeyID, const char* pszStartTime);	
	bool			AuthUserEx_Real(const char* pszParam1,const char* pszParam2);

	void			AuthUser_AppendResVersionInfo(CPacket& packet);

	bool			AuthUser_EKeyInfo(const char* pszChallenge,const char* pszEKey);
	bool			AuthUser_EKeySN(const char* pszEKeySN);
	int				GetSite(){return m_eSite;}

	bool			RequestWorldStatus();

	USERID			GetUserID()		{ return m_UserID;				}
	PASSPORT		GetPassport()	{ return m_Passport;			}
	PASSPORT		GetInPassport()	{ return m_InPassport;			}
	const char*		GetLoginID()	{ return m_strLoginID.c_str();	}

	const char*		GetIGWLoginID()	{ return m_strIGWLoginID.c_str(); }
	const char*		GetIGWPW()		{ return m_strIGWPW.c_str(); }
	string			GetIGWEkey()	{ return m_strIGWEkey; }
	void			IGWReset()		{ m_strIGWEkey.clear(); m_strIGWLoginID.clear(); m_strIGWPW.clear(); }

	void			SetLoginID(const char* pszLoginID) {m_strLoginID = pszLoginID;}
	void			SetUserID	(USERID UserID)			{ m_UserID		= UserID	;	}
	void			SetPassport	(PASSPORT Passport)		{ m_Passport	= Passport	;	}
	void			SetInPassport(PASSPORT Passport)	{ m_InPassport	= Passport	;	}

	bool			LoadLoginServerInfo();
	void			ClearLoginServerInfo();
	void			Exit();

	void			Disconnect();
	void			Disconnect2();

	void			ResetDisconnectCount();

	bool			EnterWorld();
	void			LeaveWorld();

	void			GameChannel_IN();
	void			GameChannel_OUT();

	void			SetChannelEnteringFlag(bool bValue = true){m_bChannelEntering = bValue;}
	bool			IsChannelEntering(){return m_bChannelEntering;}

	void			UserInRequest();
	void			UserMoveRequest();

	// 게임 서버 정보
	string			GetGameServerIP() {return m_sGameServerIP;}
	UINT16			GetGameServerPort() {return m_uiGameServerPort;}
	string			GetPreviousGameServerIP(){return m_sPreviousGameServerIP;}
	UINT16			GetPreviousGameServerPort(){return m_uiPreviousGameServerPort;}

	void			SetGameServerInfo(string sIP,UINT16 uiPort)
	{
		m_sPreviousGameServerIP = m_sGameServerIP;
		m_uiPreviousGameServerPort = m_uiGameServerPort;

		m_sGameServerIP = sIP; 
		m_uiGameServerPort = uiPort;
	}

	// 캐릭터 이름
	void			SetCharName(string sCharName){m_sCharName = sCharName;}
	string			GetCharName(){return m_sCharName;}

	// 로비 서버 정보
	string			GetLobbyServerIP() {return m_sLobbyServerIP;}
	UINT16			GetLobbyServerPort() {return m_uiLobbyServerPort;}
	void			SetLobbyServerInfo(string sIP,UINT16 uiPort){m_sLobbyServerIP = sIP; m_uiLobbyServerPort = uiPort;}

	void			SetWorldID(WORLD_ID uiWorldID) {m_uiWorldID = uiWorldID;}
	WORLD_ID		GetWorldID(){return m_uiWorldID;}

	
	SERVER_ID		GetServerID(){return m_uiServerID;}
	SERVER_ID		GetPreviousServerID(){return m_uiPreviousServerID;}

	void			SetServerID(SERVER_ID uiServerID)
	{
		m_uiPreviousServerID = m_uiServerID;
		m_uiServerID = uiServerID;
	}

	void			SetIndunID(int iID){ m_iIndunID = iID; }

	void			SetGameServerID(SERVER_ID uiServerID)	{ m_uiGameServerID = uiServerID; }
	SERVER_ID		GetGameServerID()	{ return m_uiGameServerID; }

	void			SetLoginServerInfo(string sIP,UINT16 uiPort){m_sLoginServerIP = sIP; m_uiLoginServerPort = uiPort;}
	void			SetLoginServerID(SERVER_ID uiServerID) {m_uiLoginServerID = uiServerID;}
	SERVER_ID		GetLoginServerID(){return m_uiLoginServerID;}

	void			SetExceptSocketFailed(bool bExcept)	{ m_bExceptSocketFailed = bExcept; }

	void			SetCurProcessStep(int eStep) {m_eCurProcessStep = eStep;}
	int				GetCurProcessStep(){return m_eCurProcessStep;}
	void			SetNextProcessStep(int eStep) {m_eNextProcessStep = eStep;}
	int				GetNextProcessStep(){return m_eNextProcessStep;}

	void			SetReceived_PROTOL_SC_START(){m_bReceived_PROTOCOL_SC_START = true;}
	void			ResetReceived_PROTOL_SC_START(){m_bReceived_PROTOCOL_SC_START = false;}

	void			SetProcessStepParams(const char* pszParam0,const char* pszParam1) {m_sProcessStepParams[0] = pszParam0;m_sProcessStepParams[1] = pszParam1;}
	bool			IsCipherInitialized(){return m_bCipherInitialized;}
	void			SetCipherInitialized(bool bValue) {m_bCipherInitialized = bValue;}

	void			SubLogic_PushCommand(TCHAR* pszCommand)
	{
		if(pszCommand)
			m_qSubLogicCommandBuffer.push(pszCommand);
	}

	// 피로도 관련 메세지박스를 띄우는 조건 변경 : 2007-7-10
	//    기존 : 주민번호 인증 미신청자  ==> 신규 : 미성년자(m_uiFDS_Param1 == 0)이면서 이미 인증 신청한 유저(m_uiFDS_Param2 = 1)
	//
	//		메세지 내용 : "피로도 시스템 관련 정보를 입력하기 바랍니다"  (당신은 미성년자이므로 성년 주민번호로 변경하세요(?))
	//
	bool			FDS_IsNeed_Limit() {return m_uiFDS_Param1 == 0? true: false;}			// 제한이 필요한가?
	bool			FDS_IsNeed_Application()												// 주민번호 변경이 필요한가?
	{	
		if(FDS_IsNeed_Limit())				// 미성년자인가?
		{
			if(m_uiFDS_Param2 == 1)			// 이미 등록(주민번호 변경)을 했던 유저인가? 이 유저는 계속 주민번호 변경을 독촉하는 의도로 메세지 박스를 보여주어야 한다.
			{
				return true;				// 메세지박스 출력
			}
		}
		else
		{
		}
		return false;
	}		

	void			FDS_SetParam(UINT32 uiValue1,UINT32 uiValue2) 
	{
		m_uiFDS_Param1 = uiValue1;
		m_uiFDS_Param2 = uiValue2;
	}

	// 캐릭터가 선택된 상태에서만 피로도 관련 NOTI 가능케함.
	bool			FDS_IsShowNotice()			{	return m_bFDSNotice ;	}
	void			FDS_SetNotice(bool bSet)	{	m_bFDSNotice = bSet ;	}

	// 스테이지 로딩 단계에서 NOTI가 채팅창에 보여지는 것을 보장함.
	bool			FDS_IsShowChat()			{	return m_bFDSChat ;	}
	void			FDS_SetChat(bool bSet)		{	m_bFDSChat = bSet ;	}
	
	void			FDS_QueryState();

protected:

	SPNMESSAGE_MAP_DECLARE()

	// Client -> Server
	//DECLARE_CS_PACKET_PROC (AUTH_CS_LOGIN);

	DECLARE_CS_PACKET_PROC (USER_CS_IN);
	DECLARE_CS_PACKET_PROC (USER_CS_MOVE);

	//DECLARE_CS_PACKET_PROC (WORLD_CS_SELECT);
	DECLARE_CS_PACKET_PROC (CHANNEL_CS_SELECT);		
	DECLARE_CS_PACKET_PROC (WORLD_CS_ENTER);		
	DECLARE_CS_PACKET_PROC (WORLD_CS_LEAVE);		

	DECLARE_CS_PACKET_PROC (GAME_CS_START);		

	DECLARE_CS_PACKET_PROC (CHAR_CS_GETLIST);		
	DECLARE_CS_PACKET_PROC (CHAR_CS_CREATE);		
	DECLARE_CS_PACKET_PROC (CHAR_CS_DELETE);		
	DECLARE_CS_PACKET_PROC (CHAR_CS_SELECT);	
	DECLARE_CS_PACKET_PROC (CHAR_CS_CHARINFO);		
	DECLARE_CS_PACKET_PROC (CHAR_CS_ACTION);		

	DECLARE_CS_PACKET_PROC (ACTION_CS_COMMAND);		// MOVE/STOP/JUMP/ATTACK
	DECLARE_CS_PACKET_PROC (SKILL_CS_USING);
	DECLARE_CS_PACKET_PROC (ITEMSKILL_CS_SELL);		//[2006/12/1]

	DECLARE_CS_PACKET_PROC (SKILL_CS_LVUP);			// AJJIYA [7/14/2005]
	DECLARE_CS_PACKET_PROC (CHAR_CS_REVIVAL);		//[2006/1/19] - jinhee
	DECLARE_CS_PACKET_PROC (CHAR_CS_PVP_REVIVAL);	//[2007/11/28] - jinhee

	DECLARE_CS_PACKET_PROC (CHAT_CS_MSG);
	DECLARE_CS_PACKET_PROC (MONEY_CS_CHAT);

	DECLARE_CS_PACKET_PROC (EVENT_CS_RAISE);		
	DECLARE_CS_PACKET_PROC (NAV_CS_ENTERSTAGE);		

	DECLARE_CS_PACKET_PROC(EVENTMISSION_CS_RAISE);	//2007/10/4]-jinhee
	DECLARE_CS_PACKET_PROC(CHAR_CS_CHANGE_CLASS);	//[2007/11/13]-jinhee

	// System message
	DECLARE_CS_PACKET_PROC( SERVERTIME_CS_INFO	);

	// Item
	DECLARE_CS_PACKET_PROC( ITEM_CS_LOOTING		);	
	DECLARE_CS_PACKET_PROC( ITEM_CS_CHANGE_SLOT	);
	DECLARE_CS_PACKET_PROC( ITEM_CS_TRASH		);
	DECLARE_CS_PACKET_PROC( ITEM_CS_USING		);	//[2005/5/23] - jinhee
	DECLARE_CS_PACKET_PROC( ITEM_CS_DIVIDE		);	//[2005/9/7]
	DECLARE_CS_PACKET_PROC( ITEM_CS_CHAT		);	//[2007/3/28]

	// Search
	DECLARE_CS_PACKET_PROC( ITEM_CS_WHERE );		//[2008.9.3]
	// Follow and Snatch
	DECLARE_CS_PACKET_PROC( ITEM_CS_TRACK );

	// Item Time ADD
	DECLARE_CS_PACKET_PROC(ITEM_CS_ADDTIME		);	//[2006/11/16]

	// Item Add Sp
	DECLARE_CS_PACKET_PROC(ITEM_CS_ADDSP		);	//[2006/11/23]

	// Storage
	DECLARE_CS_PACKET_PROC( STORAGE_CS_INMONEY	);	//[2005/7/21]
	DECLARE_CS_PACKET_PROC( STORAGE_CS_OUTMONEY	);	//[2005/7/21]

	// Gift
	DECLARE_CS_PACKET_PROC( GIFT_CS_LIST		);	//[2006/3/22]
	DECLARE_CS_PACKET_PROC( GIFT_CS_GET			);	//[2006/3/22]

	// Mail Box
	DECLARE_CS_PACKET_PROC( MAILBOX_CS_GETLIST	);	//[2006/4/13]
	DECLARE_CS_PACKET_PROC( MAILBOX_CS_SEND		);	//[2006/4/13]
	DECLARE_CS_PACKET_PROC( MAILBOX_CS_DELETE	);	//[2006/4/13]
	DECLARE_CS_PACKET_PROC( MAILBOX_CS_GETBODY	);	//[2006/4/13]
	DECLARE_CS_PACKET_PROC( MAILBOX_CS_GETCOUNT	);	//[2006/4/13]
	DECLARE_CS_PACKET_PROC( MAILBOX_CS_MOVEATTACHMENT);	//[2006/4/13]

	// PC TRADE 
	DECLARE_CS_PACKET_PROC( TRADE_CS_REQUEST	);	//[2005/7/27]
	DECLARE_CS_PACKET_PROC( TRADE_CS_RESPONSE	);	//[2005/7/27]
	DECLARE_CS_PACKET_PROC( TRADE_CS_PUSHMONEY	);	//[2005/7/27]
	DECLARE_CS_PACKET_PROC( TRADE_CS_PUSHITEM	);	//[2005/7/27]
	DECLARE_CS_PACKET_PROC( TRADE_CS_POPITEM	);	//[2005/7/27]
	DECLARE_CS_PACKET_PROC( TRADE_CS_WAIT		);	//[2007/3/22]
	DECLARE_CS_PACKET_PROC( TRADE_CS_ACCEPT		);	//[2005/7/27]
	DECLARE_CS_PACKET_PROC( TRADE_CS_CANCEL		);	//[2005/7/27]

	// Free Market
	DECLARE_CS_PACKET_PROC(FREEMARKET_CS_OPEN	);	//[2006/5/16]
	DECLARE_CS_PACKET_PROC(FREEMARKET_CS_CLOSE	);	//[2006/5/16]
	DECLARE_CS_PACKET_PROC(FREEMARKET_CS_IN		);	//[2006/5/16]
	DECLARE_CS_PACKET_PROC(FREEMARKET_CS_OUT	);	//[2006/5/16]
	DECLARE_CS_PACKET_PROC(FREEMARKET_CS_BUY	);	//[2006/5/16]

	// Way Point
	DECLARE_CS_PACKET_PROC(WAYPOINT_CS_FIND		);	//[2006/9/4]
	DECLARE_CS_PACKET_PROC(WAYPOINT_CS_MOVE		);	//[2006/9/4]	

	// Another PC Info Request
	DECLARE_CS_PACKET_PROC( BLOCK_CS_ISBLOCKED		);	//[2005/9/2]

	// Another PC Equip Item
	DECLARE_CS_PACKET_PROC( ITEM_CS_FIGURE_INFOS_FOR_SINGLE );

	// NPC TRADE
	DECLARE_CS_PACKET_PROC( NPC_SHOP_CS_SELL	);	//[2005/5/20] - jinhee
	DECLARE_CS_PACKET_PROC( NPC_SHOP_CS_BUY		);

	DECLARE_CS_PACKET_PROC( ITEM_CS_TOGGLE_USE_WEAPON_SET );

	DECLARE_CS_PACKET_PROC ( CHAR_CS_SET_QUICK_SLOT );			// AJJIYA [7/19/2005]

	// QUEST
	DECLARE_CS_PACKET_PROC( MISSION_CS_ACTION);	//[2005/9/27]
	DECLARE_CS_PACKET_PROC( QUEST_CS_ACCEPT	);	//[2005/9/27]
	DECLARE_CS_PACKET_PROC( QUEST_CS_CANCEL	);	//[2005/9/27]
	DECLARE_CS_PACKET_PROC( QUEST_CS_FINISH	);	//[2005/9/27]

	// TEAM
	DECLARE_CS_PACKET_PROC( TEAM_CS_REQUEST				);	// 2005.11.14 dhpark
	DECLARE_CS_PACKET_PROC( TEAM_CS_JOIN				);	// 2005.11.14 dhpark
	DECLARE_CS_PACKET_PROC( TEAM_CS_SECEDE				);	// 2005.11.14 dhpark
	DECLARE_CS_PACKET_PROC( TEAM_CS_EXPEL				);	// 2005.11.14 dhpark
	DECLARE_CS_PACKET_PROC( TEAM_CS_CHANGECAPTAIN		);	// 2005.11.14 dhpark
	DECLARE_CS_PACKET_PROC( TEAM_CS_CHANGELOOTINGRULE	);	// 2005.11.14 dhpark

	// Npc
	DECLARE_CS_PACKET_PROC( CUTIN_CS_OPEN		);	// 2005.11.01 dhpark 상태제어를 위해서 추가합니다.
	DECLARE_CS_PACKET_PROC( CUTIN_CS_CLOSE		);	// 2005.11.01 dhpark 상태제어를 위해서 추가합니다.

	DECLARE_CS_PACKET_PROC( NPC_CS_PORTAL		);
	DECLARE_CS_PACKET_PROC( NPC_CS_REWARD		);

	// Title
	DECLARE_CS_PACKET_PROC( TITLE_CS_CHANGE	);	// 2006.04.04 dhpark

	// Field Cash Trade 
	DECLARE_CS_PACKET_PROC( CASHSHOP_CS_VERSION	);	//[2008/4/14] - jinhee
	DECLARE_CS_PACKET_PROC( CASHSHOP_CS_PRICE	);
	DECLARE_CS_PACKET_PROC( CASHSHOP_CS_BUY		);
	DECLARE_CS_PACKET_PROC( CASHSHOP_CS_BUY_PRESENT	);
	DECLARE_CS_PACKET_PROC( CASHSHOP_CS_WISH_ADD	);

	// quick buy
	DECLARE_CS_PACKET_PROC( CASHSHOP_CS_GET_QUICK_BUY_INFO );
	DECLARE_CS_PACKET_PROC( CASHSHOP_CS_QUICK_BUY_BUY_ITEM );

	// effect item upgrade
	DECLARE_CS_PACKET_PROC( ITEM_CS_EFFECTUPGRADE );
	//
	DECLARE_CS_PACKET_PROC( NAV_CS_INSIGHT_GUID );
	
	// greener guide
	DECLARE_CS_PACKET_PROC( GREENERGUIDE_CS_FETCHAWARD );

	// new pet with shop
	DECLARE_CS_PACKET_PROC( PET_CS_OPEN_PET_SHOP );
	DECLARE_CS_PACKET_PROC( PET_CS_GET_PET_SHOP_INFO );
	DECLARE_CS_PACKET_PROC( PET_CS_ENTER_PET_SHOP );
	DECLARE_CS_PACKET_PROC( PET_CS_LEAVE_PET_SHOP );
	DECLARE_CS_PACKET_PROC( PET_CS_BUY_ITEM );
	DECLARE_CS_PACKET_PROC( PET_CS_CLOSE_PET_SHOP );
	DECLARE_CS_PACKET_PROC( PET_CS_LEARN_SKILL );
	DECLARE_CS_PACKET_PROC( PET_CS_DISCARD_SKILL );
	DECLARE_CS_PACKET_PROC( PET_CS_ADD_SSP );
	DECLARE_CS_PACKET_PROC( PET_CS_CHANGE_NAME );
	DECLARE_CS_PACKET_PROC( PET_CS_SHOUT );

protected:

	CSockWnd*			m_pSockWnd;				
	CPacketHandler*		m_pPacketHandler;
	bool				m_bMapReady;

	bool				m_bVersionCheckPassed;

	vector<CServerInfo*>		m_vLoginServerInfo;			// 로긴 서버 목록

	// 현재 클라이언트와 연결된 서버 정보
	string				m_sCurServerIP;
	int					m_iCurServerPort;

	// 게임 서버 정보 
	string				m_sGameServerIP;
	UINT16				m_uiGameServerPort;
	string				m_sPreviousGameServerIP;		// 채널이동시, 목적지 채널이 뜅길때 이곳으로 재접속
	UINT16				m_uiPreviousGameServerPort;

	// 로비 서버 정보
	string				m_sLobbyServerIP;
	UINT16				m_uiLobbyServerPort;

	WORLD_ID			m_uiWorldID;
	SERVER_ID			m_uiServerID;
	SERVER_ID			m_uiPreviousServerID;
	SERVER_ID			m_uiGameServerID;

	// 로긴 서버 정보
	string				m_sLoginServerIP;
	UINT16				m_uiLoginServerPort;

	SERVER_ID			m_uiLoginServerID;

	// 계정을 위해 추가함  2/22/2005 by metalgeni 
	USERID				m_UserID;
	PASSPORT			m_Passport;
	PASSPORT			m_InPassport;
	string				m_strLoginID;	
	
	//IGW되쩌斤口
	string				m_strIGWLoginID;
	string				m_strIGWPW;
	string				m_strIGWEkey;

	string				m_sCharName;
	bool				m_bExceptSocketFailed;
	int					m_iDisconnectCount;
	bool				m_bSendUserMoveRequest;

	int					m_eSite;

	int					m_eCurProcessStep;
	int					m_eNextProcessStep;

	string				m_sProcessStepParams[2];

	bool				m_bCipherInitialized;

	queue<string>		m_qSubLogicCommandBuffer;

	int m_iIndunID;
	bool				m_bReceived_PROTOCOL_SC_START;

	// for FDS (Shanda)
	bool				m_bFDSNotice ;		// Notice Box
	bool				m_bFDSChat ;		// Chat Message
	UINT32				m_uiFDS_Param1;		
	UINT32				m_uiFDS_Param2;	

	bool				m_bChannelEntering;		// true(CHANNEL_CS_IN를 전송함)
};




// Server -> Client
DECLARE_SC_PACKET_PROC(ECHO_XX_PACKET);

DECLARE_SC_PACKET_PROC(PROTOCOL_SC_START_REQ);
DECLARE_SC_PACKET_PROC(PROTOCOL_SC_START);
DECLARE_SC_PACKET_PROC(PROTOCOL_SC_CHECK_CLIENT_VALIDATION_REQ);

DECLARE_SC_PACKET_PROC(PROTOCOL_SC_LOGINSERVERINFO);

DECLARE_SC_PACKET_PROC(PROTOCOL_SC_START_DYNCODE_1);
DECLARE_SC_PACKET_PROC(PROTOCOL_SC_START_DYNCODE_2);


DECLARE_SC_PACKET_PROC (SYSTEM_SC_ERROR);		

DECLARE_SC_PACKET_PROC(AUTH_SC_LOGIN);					// Login
DECLARE_SC_PACKET_PROC(AUTH_SC_LOGIN_EX);					// LoginEx
DECLARE_SC_PACKET_PROC(AUTH_SC_EKEY);				

DECLARE_SC_PACKET_PROC(USER_SC_IN);
DECLARE_SC_PACKET_PROC(USER_SC_MOVE);

DECLARE_SC_PACKET_PROC(WORLD_SC_GETLIST);				// World/Channel Selection
DECLARE_SC_PACKET_PROC(WORLD_SC_SELECT);
DECLARE_SC_PACKET_PROC(WORLD_SC_CHANNELSTATUS);
DECLARE_SC_PACKET_PROC(CHANNEL_SC_SELECT);
DECLARE_SC_PACKET_PROC(WORLD_SC_CHANNELSTATUS2);
DECLARE_SC_PACKET_PROC(WORLD_SC_ENTER);
DECLARE_SC_PACKET_PROC(WORLD_SC_LEAVE);

DECLARE_SC_PACKET_PROC(GAME_SC_CHANGE_CHANNEL);
DECLARE_SC_PACKET_PROC(GAME_SC_START);					// EnterGame

DECLARE_SC_PACKET_PROC(GAME_SC_GETOPTION);
DECLARE_SC_PACKET_PROC(GAME_SC_SETOPTION);

DECLARE_SC_PACKET_PROC(CHAR_SC_GETLIST);				// Character Create/deete/select
DECLARE_SC_PACKET_PROC(CHAR_SC_CHECK_CHARNAME);
DECLARE_SC_PACKET_PROC(CHAR_SC_CREATE);
DECLARE_SC_PACKET_PROC(CHAR_SC_DELETE);
DECLARE_SC_PACKET_PROC(CHAR_SC_SELECT);
DECLARE_SC_PACKET_PROC(CHAR_SC_CHARINFO);
DECLARE_SC_PACKET_PROC(CHAR_SC_ACTION);
DECLARE_SC_PACKET_PROC(CHAR_SC_MOVING_STATUS_INFO);
DECLARE_SC_PACKET_PROC(CHAR_SC_FACING);

// Inventory Container Slot Extend 
DECLARE_SC_PACKET_PROC(CHAR_SC_CONTAINER_INFOS);

DECLARE_SC_PACKET_PROC(NAV_SC_INSIGHT);
//DECLARE_SC_PACKET_PROC(NAV_SC_INSIGHT_EX);
DECLARE_SC_PACKET_PROC(NAV_SC_OUTOFSIGHT);
DECLARE_SC_PACKET_PROC(ACTION_SC_COMMAND);		// MOVE/STOP/JUMP/ATTACK
DECLARE_SC_PACKET_PROC(ACTION_SC_KNOCKBACK);
DECLARE_SC_PACKET_PROC(BATTLE_SC_ATTACKED);
DECLARE_SC_PACKET_PROC(BATTLE_SC_HEALING);
DECLARE_SC_PACKET_PROC(NAV_SC_INSIGHT_GUID);

DECLARE_SC_PACKET_PROC(ITEM_SC_FIGURE_INFOS	);
DECLARE_SC_PACKET_PROC(ITEM_SC_FIGURE_ON	);
DECLARE_SC_PACKET_PROC(ITEM_SC_FIGURE_OFF	);
DECLARE_SC_PACKET_PROC(ITEM_SC_TOGGLE_USE_WEAPON_SET);

DECLARE_SC_PACKET_PROC(STAT_SC_CHANGE);
DECLARE_SC_PACKET_PROC(STAT_SC_CHANGE_EX);
DECLARE_SC_PACKET_PROC(STAT_SC_LEVEL_UP);

DECLARE_SC_PACKET_PROC(WORLDENV_SC_DATETIME);
DECLARE_SC_PACKET_PROC(WORLDENV_SC_WEATHER);

DECLARE_SC_PACKET_PROC(CHAT_SC_MSG);
DECLARE_SC_PACKET_PROC(CHAT_SC_MSG_MONEY);
DECLARE_SC_PACKET_PROC(CHAT_SC_MSG_PCINFO);
DECLARE_SC_PACKET_PROC(MONEY_SC_CHAT);
DECLARE_SC_PACKET_PROC(CHAR_SC_GM_STATUS);
DECLARE_SC_PACKET_PROC(CHAR_SC_STATUSINFO);
DECLARE_SC_PACKET_PROC(CHAR_SC_QUICK_SLOT);
DECLARE_SC_PACKET_PROC(CHAR_SC_EFFECT_STATUS_INFO);

DECLARE_SC_PACKET_PROC(MSG_SC_NOTICE);

DECLARE_SC_PACKET_PROC(EVENT_SC_RAISE);

DECLARE_SC_PACKET_PROC(EVENTMISSION_SC_LIST);
DECLARE_SC_PACKET_PROC(EVENTMISSION_SC_RAISE);
DECLARE_SC_PACKET_PROC(CHAR_SC_CHANGE_CLASS);

// Item		
DECLARE_SC_PACKET_PROC( ITEM_SC_CONTAINER_INFO	);
DECLARE_SC_PACKET_PROC( ITEM_SC_CONTAINER_INFOS	);
DECLARE_SC_PACKET_PROC( ITEM_SC_LOOTING			);
DECLARE_SC_PACKET_PROC( ITEM_SC_CHANGE_SLOT		);
DECLARE_SC_PACKET_PROC( ITEM_SC_TRASH			);
DECLARE_SC_PACKET_PROC( ITEM_SC_ALARM			);	
DECLARE_SC_PACKET_PROC( ITEM_SC_DIVIDE			);	
DECLARE_SC_PACKET_PROC( ITEM_SC_USING			);	
DECLARE_SC_PACKET_PROC( NPC_SHOP_SC_BUY			);	
DECLARE_SC_PACKET_PROC( ITEM_SC_ENCHANT			);	
DECLARE_SC_PACKET_PROC( ITEM_SC_UPGRADE			);	
DECLARE_SC_PACKET_PROC( ITEM_SC_DESTROY_BY_TIME );
DECLARE_SC_PACKET_PROC( ITEM_SC_EXPIRE			);
DECLARE_SC_PACKET_PROC( ITEM_SC_ADDTIME			);
DECLARE_SC_PACKET_PROC( ITEM_SC_ITEMEXP			);
DECLARE_SC_PACKET_PROC( ITEM_SC_ADDSP			);
DECLARE_SC_PACKET_PROC( ITEM_SC_CHAT			);	//[2007/3/28]
DECLARE_SC_PACKET_PROC( ITEM_SC_WHERE			);	//[2008.9.3]
DECLARE_SC_PACKET_PROC( ITEM_SC_TRACK			);	//[2008.10.10]
DECLARE_SC_PACKET_PROC( ITEM_SC_WHERE_COMMAMD_INFOS );//[2008.9.4]
DECLARE_SC_PACKET_PROC( ITEM_SC_MIX				);	// 아이템조합 [9/12/2007 AJJIYA]
DECLARE_SC_PACKET_PROC( CHAR_SC_ITEMMIX_INFO	);	// 아이템조합 정보 [9/12/2007 AJJIYA]
DECLARE_SC_PACKET_PROC( ITEM_SC_EFFECTUPGRADE	);

// Another PC Equip
DECLARE_SC_PACKET_PROC( ITEM_SC_FIGURE_INFOS_FOR_SINGLE );

// Storage
DECLARE_SC_PACKET_PROC( STORAGE_SC_INMONEY		);
DECLARE_SC_PACKET_PROC( STORAGE_SC_OUTMONEY		);

// Gift
DECLARE_SC_PACKET_PROC( GIFT_SC_LIST			);
DECLARE_SC_PACKET_PROC( GIFT_SC_GET				);

// Trade
DECLARE_SC_PACKET_PROC( TRADE_SC_REQUEST		);
DECLARE_SC_PACKET_PROC( TRADE_SC_RESPONSE		);
DECLARE_SC_PACKET_PROC( TRADE_SC_PUSHMONEY		);
DECLARE_SC_PACKET_PROC( TRADE_SC_PUSHITEM		);
DECLARE_SC_PACKET_PROC( TRADE_SC_POPITEM		);
DECLARE_SC_PACKET_PROC( TRADE_SC_WAIT			);
DECLARE_SC_PACKET_PROC( TRADE_SC_ACCEPT			);
DECLARE_SC_PACKET_PROC( TRADE_SC_CANCEL			);

// Quest
DECLARE_SC_PACKET_PROC( MISSION_SC_LIST			);
DECLARE_SC_PACKET_PROC( MISSION_SC_UPDATE		);
DECLARE_SC_PACKET_PROC( MISSION_SC_ACTION		);
DECLARE_SC_PACKET_PROC( QUEST_SC_LIST			);
DECLARE_SC_PACKET_PROC( QUEST_SC_ACCEPT			);
DECLARE_SC_PACKET_PROC( QUEST_SC_CANCEL			);
DECLARE_SC_PACKET_PROC( QUEST_SC_FINISH			);
DECLARE_SC_PACKET_PROC( QUEST_SC_SHARE			);
DECLARE_SC_PACKET_PROC( QUEST_SC_SHARE_RECV		);


// Team
DECLARE_SC_PACKET_PROC( TEAM_SC_REQUEST				);
DECLARE_SC_PACKET_PROC( TEAM_SC_JOIN				);
DECLARE_SC_PACKET_PROC( TEAM_SC_SECEDE				);
DECLARE_SC_PACKET_PROC( TEAM_SC_EXPEL				);
DECLARE_SC_PACKET_PROC( TEAM_SC_CHANGECAPTAIN		);
DECLARE_SC_PACKET_PROC( TEAM_SC_CHANGELOOTINGRULE	);
DECLARE_SC_PACKET_PROC( TEAM_SC_UPDATEMEMBER		);
DECLARE_SC_PACKET_PROC( TEAM_SC_INFO				);

DECLARE_SC_PACKET_PROC( ITEM_SC_LOOTING_LIST	);

// Npc
DECLARE_SC_PACKET_PROC( CUTIN_SC_OPEN				);
DECLARE_SC_PACKET_PROC( CUTIN_SC_CLOSE			);
DECLARE_SC_PACKET_PROC( NPC_SC_PORTAL			);
DECLARE_SC_PACKET_PROC( NPC_SC_REWARD			);

// Skill
DECLARE_SC_PACKET_PROC( SKILL_SC_INFOS		);
DECLARE_SC_PACKET_PROC( SKILL_SC_INIT		);
DECLARE_SC_PACKET_PROC( SKILL_SC_USING		);
DECLARE_SC_PACKET_PROC( ITEMSKILL_SC_USING	);
DECLARE_SC_PACKET_PROC( SKILL_SC_LVUP		);
DECLARE_SC_PACKET_PROC( SKILL_SC_LEARN		);
DECLARE_SC_PACKET_PROC( SKILL_SC_INIT_ITEMMIX		);
DECLARE_SC_PACKET_PROC( SKILL_SC_INIT_SELECTIVE		);
DECLARE_SC_PACKET_PROC( EFFECT_SC_INFOS	);
DECLARE_SC_PACKET_PROC( EFFECT_SC_DEL	);

// Quick Slot
//DECLARE_SC_PACKET_PROC( CHAR_SC_QUICK_SLOT );	// AJJIYA [7/14/2005]


// Friend/Block list
DECLARE_SC_PACKET_PROC( FRIEND_SC_GETLIST);
DECLARE_SC_PACKET_PROC( FRIEND_SC_ADD);
DECLARE_SC_PACKET_PROC( FRIEND_SC_ADD_RECV);
DECLARE_SC_PACKET_PROC( FRIEND_SC_ACCEPT);
DECLARE_SC_PACKET_PROC( FRIEND_SC_DELETE);
DECLARE_SC_PACKET_PROC( FRIEND_SC_REFRESH_STATUS);

DECLARE_SC_PACKET_PROC( BLOCK_SC_GETLIST);
DECLARE_SC_PACKET_PROC( BLOCK_SC_ADD);
DECLARE_SC_PACKET_PROC( BLOCK_SC_DELETE);
DECLARE_SC_PACKET_PROC( BLOCK_SC_ISBLOCKED);

// Title
DECLARE_SC_PACKET_PROC( TITLE_SC_LIST			);
DECLARE_SC_PACKET_PROC( TITLE_SC_INSERT			);
DECLARE_SC_PACKET_PROC( TITLE_SC_CHANGE			);

// CashShop
DECLARE_SC_PACKET_PROC( CASHSHOP_SC_IN );
DECLARE_SC_PACKET_PROC( CASHSHOP_SC_OUT );
DECLARE_SC_PACKET_PROC( CASHSHOP_SC_INFO );
DECLARE_SC_PACKET_PROC( CASHSHOP_SC_CASH );
DECLARE_SC_PACKET_PROC( CASHSHOP_SC_BUY );
DECLARE_SC_PACKET_PROC( CASHSHOP_SC_BUY_PRESENT );
DECLARE_SC_PACKET_PROC( CASHSHOP_SC_SELL );
DECLARE_SC_PACKET_PROC( CASHSHOP_SC_COUPON );
DECLARE_SC_PACKET_PROC( CASHSHOP_SC_WISH_LIST);
DECLARE_SC_PACKET_PROC( CASHSHOP_SC_WISH_ADD);
DECLARE_SC_PACKET_PROC( CASHSHOP_SC_WISH_DEL);
DECLARE_SC_PACKET_PROC( CASHSHOP_SC_MINOR_INIT);
DECLARE_SC_PACKET_PROC( CASHSHOP_SC_MINOR_INFO);
DECLARE_SC_PACKET_PROC( CASHSHOP_SC_OUT_READY);
DECLARE_SC_PACKET_PROC( CASHSHOP_SC_VERSION );
DECLARE_SC_PACKET_PROC( CASHSHOP_SC_PRICE );
DECLARE_SC_PACKET_PROC( CASHSHOP_SC_HOT_INFO );
DECLARE_SC_PACKET_PROC( CASHSHOP_SC_HOT_STATUS );
DECLARE_SC_PACKET_PROC( CASHSHOP_SC_GET_QUICK_BUY_INFO );

// Mail Box
DECLARE_SC_PACKET_PROC( MAILBOX_SC_GETLIST	);	
DECLARE_SC_PACKET_PROC( MAILBOX_SC_SEND		);	
DECLARE_SC_PACKET_PROC( MAILBOX_SC_DELETE	);	
DECLARE_SC_PACKET_PROC( MAILBOX_SC_GETBODY	);	
DECLARE_SC_PACKET_PROC( MAILBOX_SC_MOVEATTACHMENT);
DECLARE_SC_PACKET_PROC( MAILBOX_SC_NEWMAIL);

// FreeMarket
DECLARE_SC_PACKET_PROC( FREEMARKET_SC_OPEN		);
DECLARE_SC_PACKET_PROC( FREEMARKET_SC_CLOSE		);
DECLARE_SC_PACKET_PROC( FREEMARKET_SC_IN		);
DECLARE_SC_PACKET_PROC( FREEMARKET_SC_OUT		);
DECLARE_SC_PACKET_PROC( FREEMARKET_SC_BUY		);

// WayPoint
DECLARE_SC_PACKET_PROC( WAYPOINT_SC_LIST		);
DECLARE_SC_PACKET_PROC( WAYPOINT_SC_FIND		);
DECLARE_SC_PACKET_PROC( WAYPOINT_SC_MOVE		);

// BeautyShop
DECLARE_SC_PACKET_PROC( ITEM_SC_BASIC_FIGURE_CHANGE	);

// Guild
DECLARE_SC_PACKET_PROC( GUILD_SC_PCGUILD			);
DECLARE_SC_PACKET_PROC( GUILD_SC_GUILD_COMMON		);
DECLARE_SC_PACKET_PROC( GUILD_SC_MEMBERLIST			);
DECLARE_SC_PACKET_PROC( GUILD_SC_CREATE				);
DECLARE_SC_PACKET_PROC( GUILD_SC_DESTROY			);
DECLARE_SC_PACKET_PROC( GUILD_SC_UPDATE_SLOGAN		);
DECLARE_SC_PACKET_PROC( GUILD_SC_REQUEST			);
DECLARE_SC_PACKET_PROC( GUILD_SC_JOIN				);
DECLARE_SC_PACKET_PROC( GUILD_SC_SECEDE				);
DECLARE_SC_PACKET_PROC( GUILD_SC_EXPEL				);
DECLARE_SC_PACKET_PROC( GUILD_SC_EXPEL_ME			);
DECLARE_SC_PACKET_PROC( GUILD_SC_CHANGEGRADE		);
DECLARE_SC_PACKET_PROC( GUILD_SC_CHANGEGRADE_ME		);
DECLARE_SC_PACKET_PROC( GUILD_SC_MSG_MEMBER			);
DECLARE_SC_PACKET_PROC( GUILD_SC_MSG_GUILD			);
DECLARE_SC_PACKET_PROC( GUILD_SC_CHANGEMASTER		);
DECLARE_SC_PACKET_PROC( GUILD_SC_CHANGEMASTER_ME	);
DECLARE_SC_PACKET_PROC( GUILD_SC_PLANT				);
DECLARE_SC_PACKET_PROC( GUILD_SC_GRUB				);
DECLARE_SC_PACKET_PROC( GUILD_SC_NOURISH			);
DECLARE_SC_PACKET_PROC( GUILD_SC_GROWTHCROP			);
DECLARE_SC_PACKET_PROC( GUILD_SC_RANKUP				);
DECLARE_SC_PACKET_PROC( GUILD_SC_CHANGEMARK			);
								
DECLARE_SC_PACKET_PROC( NOTI_SC_ONLINE_STATUS_FRIEND );
DECLARE_SC_PACKET_PROC( SUBLOGIC_SC_COMMAND );

// Indun
DECLARE_SC_PACKET_PROC( INDUN_SC_IN					);
DECLARE_SC_PACKET_PROC( INDUN_SC_OUT				);
DECLARE_SC_PACKET_PROC( INDUN_SC_INIT				);

// Lottery
DECLARE_SC_PACKET_PROC( LOTTERY_SC_START			);
DECLARE_SC_PACKET_PROC( LOTTERY_SC_UPDATE			);
DECLARE_SC_PACKET_PROC( LOTTERY_SC_CHOICE			);

// Gamble
DECLARE_SC_PACKET_PROC( GAMBLE_SC_REQ				);

DECLARE_SC_PACKET_PROC( FDS_SC_NOTICE );

// PVP
DECLARE_SC_PACKET_PROC( PVP_SC_REGIST				);
DECLARE_SC_PACKET_PROC( PVP_SC_CANCEL				);
DECLARE_SC_PACKET_PROC( PVP_SC_IN					);
DECLARE_SC_PACKET_PROC( PVP_SC_LOADSTATUS			);
DECLARE_SC_PACKET_PROC( PVP_SC_START				);
DECLARE_SC_PACKET_PROC( PVP_SC_OUT					);
DECLARE_SC_PACKET_PROC( PVP_SC_RANK					);
DECLARE_SC_PACKET_PROC( PVP_SC_FINISH				);

// 서버시간/정보
DECLARE_SC_PACKET_PROC( SERVERTIME_SC_INFO			);

// 보안툴 검증
DECLARE_SC_PACKET_PROC( SECURITY_SC_CHECK			);
DECLARE_SC_PACKET_PROC( SECURITY_SC_INFO			);

// ChattingRoom
DECLARE_SC_PACKET_PROC( CHATROOM_SC_CREATE			);
DECLARE_SC_PACKET_PROC( CHATROOM_SC_ROOMINFO_CHECK	);
DECLARE_SC_PACKET_PROC( CHATROOM_SC_JOIN			);
DECLARE_SC_PACKET_PROC( CHATROOM_SC_MODIFY			);
DECLARE_SC_PACKET_PROC( CHATROOM_SC_OUT				);
DECLARE_SC_PACKET_PROC( CHATROOM_SC_FORCEOUT		);
DECLARE_SC_PACKET_PROC( CHATROOM_SC_CHANGEMASTER	);
DECLARE_SC_PACKET_PROC( CHATROOM_SC_BROADCAST_UNITED_MESSAGE	);
DECLARE_SC_PACKET_PROC( CHATROOM_SC_MEMBERLIST		);
DECLARE_SC_PACKET_PROC( CHATROOM_SC_ADVERT			);
DECLARE_SC_PACKET_PROC( CHATROOM_SC_ROOMLIST		);
DECLARE_SC_PACKET_PROC( CHATROOM_SC_USERLIST		);
DECLARE_SC_PACKET_PROC( CHATROOM_SC_INVITE_ANS		);
DECLARE_SC_PACKET_PROC( CHATROOM_SC_INVITE_REQ		);
DECLARE_SC_PACKET_PROC( CHATROOM_SC_INVITE_ANS		);
DECLARE_SC_PACKET_PROC( CHATROOM_SC_OTHERPC_INFO	);
DECLARE_SC_PACKET_PROC( CHATROOM_SC_GET_MYSTYLE		);

// AUCTION
DECLARE_SC_PACKET_PROC( AUCTION_SC_OPEN			);
DECLARE_SC_PACKET_PROC( AUCTION_SC_CREATE		);
DECLARE_SC_PACKET_PROC( AUCTION_SC_CANCEL		);
DECLARE_SC_PACKET_PROC( AUCTION_SC_FINISH		);
DECLARE_SC_PACKET_PROC( AUCTION_SC_FINISH_SELL	);
DECLARE_SC_PACKET_PROC( AUCTION_SC_BID			);
DECLARE_SC_PACKET_PROC( AUCTION_SC_BUYOUT		);		
DECLARE_SC_PACKET_PROC( AUCTION_SC_SEARCH_INFO	);
DECLARE_SC_PACKET_PROC( AUCTION_SC_INFO_4BIDDER	);
DECLARE_SC_PACKET_PROC( AUCTION_SC_BIDLIST		);
DECLARE_SC_PACKET_PROC( AUCTION_SC_BIDDEL		);		
DECLARE_SC_PACKET_PROC( AUCTION_SC_INFO_4SELLER	);
DECLARE_SC_PACKET_PROC( AUCTION_SC_SELLLIST		);		

//	CoolTime
DECLARE_SC_PACKET_PROC( COOLTIME_SC_INFOS		);		

//[xialin 2008/07/25]add
DECLARE_SC_PACKET_PROC( CASHSHOP_SC_EFFECT			);

//[xialin 2008/07/25]add
DECLARE_SC_PACKET_PROC( CASHSHOP_SC_ASK_BUY			);

//[xialin 2008/07/25]add
DECLARE_SC_PACKET_PROC( CASHSHOP_SC_ASK_BUY_RECV	);

//[xialin 2008/09/11]add
DECLARE_SC_PACKET_PROC( ITEM_SC_MSGBOARD	);

//[xialin 2008/09/11]add
DECLARE_SC_PACKET_PROC( ITEM_SC_DEL_MSGBOARD	);

// greener guide
DECLARE_SC_PACKET_PROC( GREENERGUIDE_SC_EVENT );
DECLARE_SC_PACKET_PROC( GREENERGUIDE_SC_FETECHAWARD );

//[xialin 2008/10/13]add
DECLARE_SC_PACKET_PROC( GAMBLE_SC_GET_STATUS	);
DECLARE_SC_PACKET_PROC( GAMBLE_SC_UPDATE	);
DECLARE_SC_PACKET_PROC( GAMBLE_SC_BUY	);
DECLARE_SC_PACKET_PROC( GAMBLE_SC_UN_BUY	);
DECLARE_SC_PACKET_PROC( GAMBLE_SC_ACCEPT_ITEM	);
DECLARE_SC_PACKET_PROC( GAMBLE_SC_ACCEPT_SECOND_ITEM	);
DECLARE_SC_PACKET_PROC( GAMBLE_SC_ENTER_GAMBLE	);
DECLARE_SC_PACKET_PROC( GAMBLE_SC_LEAVER_GAMBLE	);
DECLARE_SC_PACKET_PROC( GAMBLE_SC_INITIAL	);
DECLARE_SC_PACKET_PROC( GAMBLE_SC_BROADCAST_GETTED_ITEM	);
DECLARE_SC_PACKET_PROC( GAMBLE_SC_GET_NAME	);

// new pet with shop
DECLARE_SC_PACKET_PROC( PET_SC_GET_INFO );
DECLARE_SC_PACKET_PROC( PET_SC_OPEN_PET_SHOP );
DECLARE_SC_PACKET_PROC( PET_SC_GET_PET_SHOP_INFO );
DECLARE_SC_PACKET_PROC( PET_SC_ENTER_PET_SHOP );
DECLARE_SC_PACKET_PROC( PET_SC_LEAVE_PET_SHOP );
DECLARE_SC_PACKET_PROC( PET_SC_UPDATE_PET_SHOP_ITEM );
DECLARE_SC_PACKET_PROC( PET_SC_BUY_ITEM );
DECLARE_SC_PACKET_PROC( PET_SC_CLOSE_PET_SHOP );
DECLARE_SC_PACKET_PROC( PET_SC_LEARN_SKILL );
DECLARE_SC_PACKET_PROC( PET_SC_DISCARD_SKILL );
DECLARE_SC_PACKET_PROC( PET_SC_PET_ATTR_CHANGE );
DECLARE_SC_PACKET_PROC( PET_SC_PET_TAKE_OFF );
DECLARE_SC_PACKET_PROC( PET_SC_ADD_SSP );
DECLARE_SC_PACKET_PROC( PET_SC_CHANGE_NAME );
DECLARE_SC_PACKET_PROC( PET_SC_SHOUT );
DECLARE_SC_PACKET_PROC( PET_SC_PET_SHOP_CLOSED );

//	Love [11/3/2008 AJJIYA]
DECLARE_SC_PACKET_PROC( WEDDING_SC_INFO				);
DECLARE_SC_PACKET_PROC( WEDDING_SC_REQUEST			);
DECLARE_SC_PACKET_PROC( WEDDING_SC_REQUEST_RECV		);
DECLARE_SC_PACKET_PROC( WEDDING_SC_RESPONSE			);
DECLARE_SC_PACKET_PROC( WEDDING_SC_WEDDING_CANCEL	);
DECLARE_SC_PACKET_PROC( WEDDING_SC_MOTION_STARTEND	);
DECLARE_SC_PACKET_PROC( WEDDING_SC_UPDATEMEMBER		);
DECLARE_SC_PACKET_PROC( WEDDING_SC_PARTING			);
DECLARE_SC_PACKET_PROC( WEDDING_SC_SKILL_USING		);
DECLARE_SC_PACKET_PROC( WEDDING_SC_SUMMON_REQUEST	);
DECLARE_SC_PACKET_PROC( WEDDING_SC_SUMMON_REQUEST_ERR);
DECLARE_SC_PACKET_PROC( WEDDING_SC_SUMMON_RESPONSE	);
DECLARE_SC_PACKET_PROC( WEDDING_SC_SUMMON_RESPONSE_RECV	);

extern SPNetworkManager* g_pNetworkManager;



